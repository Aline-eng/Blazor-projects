@using TaskManager.Models
@rendermode InteractiveServer

<div class="card mb-2 @GetPriorityClass()">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center">
                    <input type="checkbox" 
                           checked="@TaskItem.IsCompleted" 
                           @onchange="(e) => ToggleComplete()" 
                           class="form-check-input me-2" />
                    
                    <div>
                        <h5 class="@(TaskItem.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                            @TaskItem.Title
                        </h5>
                        
                        @if (!string.IsNullOrEmpty(TaskItem.Description))
                        {
                            <p class="text-muted mb-1">@TaskItem.Description</p>
                        }
                        
                        <div class="d-flex gap-3 text-sm text-muted">
                            <span>Created: @TaskItem.CreatedDate.ToString("MMM dd, yyyy")</span>
                            
                            @if (TaskItem.DueDate.HasValue)
                            {
                                <span class="@GetDueDateClass()">
                                    Due: @TaskItem.DueDate.Value.ToString("MMM dd, yyyy")
                                </span>
                            }
                            
                            <span class="badge @GetPriorityBadgeClass()">@TaskItem.Priority</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="d-flex gap-1">
                <button class="btn btn-sm btn-outline-primary" @onclick="Edit">
                    <i class="bi bi-pencil"></i> Edit
                </button>
                <button class="btn btn-sm btn-outline-danger" @onclick="Delete">
                    <i class="bi bi-trash"></i> Delete
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TaskItem TaskItem { get; set; } = new();

    [Parameter]
    public EventCallback<TaskItem> OnEdit { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter]
    public EventCallback<TaskItem> OnToggleComplete { get; set; }

    private string GetPriorityClass()
    {
        return TaskItem.Priority switch
        {
            Priority.High => "border-danger",
            Priority.Medium => "border-warning",
            Priority.Low => "border-info",
            _ => ""
        };
    }

    private string GetPriorityBadgeClass()
    {
        return TaskItem.Priority switch
        {
            Priority.High => "bg-danger",
            Priority.Medium => "bg-warning",
            Priority.Low => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateClass()
    {
        if (!TaskItem.DueDate.HasValue || TaskItem.IsCompleted) return "";
        
        var dueDate = TaskItem.DueDate.Value;
        if (dueDate < DateTime.Today) return "text-danger fw-bold";
        if (dueDate == DateTime.Today) return "text-warning fw-bold";
        
        return "";
    }

    private async Task Edit()
    {
        await OnEdit.InvokeAsync(TaskItem);
    }

    private async Task Delete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{TaskItem.Title}'?"))
        {
            await OnDelete.InvokeAsync(TaskItem.Id);
        }
    }

    private async Task ToggleComplete()
    {
        await OnToggleComplete.InvokeAsync(TaskItem);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
}